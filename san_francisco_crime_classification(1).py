# -*- coding: utf-8 -*-
"""San Francisco Crime Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zWe34UwZtytkwkwxxDPXDgJynPDULcDZ
"""

import numpy as np
import pandas as pd
# Import Libraries
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import VotingClassifier
from xgboost import XGBClassifier

traindata=pd.read_csv('/content/train.csv')
testdata=pd.read_csv('/content/test.csv')
traindata

traindata.isna().sum()

traindata = traindata.drop(['Descript', 'Resolution', 'Address'], axis = 1)
testdata = testdata.drop(['Address'], axis = 1)

def feature_engineering(df):
  df['Dates'] = pd.to_datetime(df['Dates']) # Convert 'Dates' column to datetime
  df['day'] = df['Dates'].dt.day
  df['month'] = df['Dates'].dt.month
  df['year'] = df['Dates'].dt.year
  df['day_of_week'] = df['Dates'].dt.dayofweek
  df['hour'] = df['Dates'].dt.hour
  df['Minute'] = df['Dates'].dt.minute
  df['WeekOfYear'] = df['Dates'].dt.isocalendar().week
  df.drop(['Dates'], axis=1, inplace=True)

  return df
traindata=feature_engineering(traindata)
testdata=feature_engineering(testdata)

label_encoder = LabelEncoder()
def encode_labels(df):
    for column in df.columns:
        if df[column].dtype == 'object':
            df[column] = label_encoder.fit_transform(df[column])

    return df
traindata=encode_labels(traindata)
testdata=encode_labels(testdata)

traindata.head(5)

X=traindata.drop(['Category'],axis=1)
y=traindata['Category']

x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

RandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=100,max_depth=2,random_state=33) #criterion can be also : entropy
RandomForestClassifierModel.fit(x_train, y_train)
#Calculating Prediction
RFC_y_pred = RandomForestClassifierModel.predict(x_test)
# Calculate accuracy
val_accuracy = accuracy_score(y_test, RFC_y_pred)
print(f"Accuracy Score: {val_accuracy}")

# Calculate precision
precision = precision_score(y_test, RFC_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"Precision: {precision}")

# Calculate recall
recall = recall_score(y_test, RFC_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"Recall: {recall}")

# Calculate F1-score
f1 = f1_score(y_test, RFC_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"F1-Score: {f1}")

DecisionTreeClassifierModel = DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=33) #criterion can be entropy
DecisionTreeClassifierModel.fit(x_train, y_train)

#Calculating Prediction
DTC_y_pred = DecisionTreeClassifierModel.predict(x_test)
# Calculate accuracy
val_accuracy = accuracy_score(y_test, DTC_y_pred)
print(f"Accuracy Score: {val_accuracy}")

# Calculate precision
precision = precision_score(y_test, DTC_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"Precision: {precision}")

# Calculate recall
recall = recall_score(y_test, DTC_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"Recall: {recall}")

# Calculate F1-score
f1 = f1_score(y_test, DTC_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"F1-Score: {f1}")

KNNClassifierModel = KNeighborsClassifier(n_neighbors= 5,weights ='uniform', # it can be distance
                                          algorithm='auto') # it can be ball_tree, kd_tree,brute
KNNClassifierModel.fit(x_train, y_train)

#Calculating Prediction
KNN_y_pred = KNNClassifierModel.predict(x_test)
# Calculate accuracy
val_accuracy = accuracy_score(y_test, KNN_y_pred)
print(f"Accuracy Score: {val_accuracy}")
# Calculate precision
precision = precision_score(y_test, KNN_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"Precision: {precision}")

# Calculate recall
recall = recall_score(y_test, KNN_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"Recall: {recall}")

# Calculate F1-score
f1 = f1_score(y_test, KNN_y_pred, average='micro') # Change average to 'micro' for multiclass
print(f"F1-Score: {f1}")

test_predictions = DecisionTreeClassifierModel.predict(testdata.drop(['Id'], axis=1))
# Create submission file
submission = pd.DataFrame({'id': testdata['Id'], 'Response': test_predictions})
submission.to_csv('submission.csv', index=False)
print("\nSubmission file created successfully!")